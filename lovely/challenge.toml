[manifest]
version = "1.0.0"
dump_lua = true
priority = -5

# function G.UIDEF.challenge_list_page()
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local challenge_unlocked = G.PROFILES[G.SETTINGS.profile].challenges_unlocked and (G.PROFILES[G.SETTINGS.profile].challenges_unlocked >= k)"
position = 'at'
payload = "local challenge_unlocked = SMODS.challenge_is_unlocked(v, k)"
match_indent = true

# function G.UIDEF.challenges() - fix challenge unlock count
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """
local _ch_tab = {comp = _ch_comp, unlocked = G.PROFILES[G.SETTINGS.profile].challenges_unlocked}
"""
position = 'at'
payload = """
local unlock_count = 0
for k, v in ipairs(G.CHALLENGES) do
    if SMODS.challenge_is_unlocked(v, k) then
        unlock_count = unlock_count + 1
    end
end
local _ch_tab = {comp = _ch_comp, unlocked = unlock_count}
"""
match_indent = true

# Add button colour
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "UIBox_button({id = k, col = true, label = {challenge_unlocked and localize(v.id, 'challenge_names') or localize('k_locked'),}, button = challenge_unlocked and 'change_challenge_description' or 'nil', colour = challenge_unlocked and G.C.RED or G.C.GREY, minw = 4, scale = 0.4, minh = 0.6, focus_args = {snap_to = not snapped}}),"
position = 'at'
match_indent = true
payload = '''
UIBox_button({id = k, col = true, label = {challenge_unlocked and localize(v.id, 'challenge_names') or localize('k_locked'),}, button = challenge_unlocked and 'change_challenge_description' or 'nil', colour = challenge_unlocked and (v.button_colour or G.C.RED) or G.C.GREY, minw = 4, scale = 0.4, minh = 0.6, focus_args = {snap_to = not snapped}}),
'''

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions.banned_cards then'''
position = "after"
payload = '''   if type(_ch.restrictions.banned_cards) == 'function' then
        _ch.restrictions.banned_cards = _ch.restrictions.banned_cards()
	end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions.banned_tags then'''
position = "after"
payload = '''
    if type(_ch.restrictions.banned_tags) == 'function' then
        _ch.restrictions.banned_tags = _ch.restrictions.banned_tags()
    end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions.banned_other then'''
position = "after"
payload = '''
    if type(_ch.restrictions.banned_other) == 'function' then
        _ch.restrictions.banned_other = _ch.restrictions.banned_other()
    end'''
match_indent = true
times = 1

# apply
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
local _ch = args.challenge
'''
position = "after"
payload = '''
if _ch.apply and type(_ch.apply) == "function" then
    _ch:apply()
end
'''
match_indent = true





#
# Inits extra blinds added in challenges
#

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions then'''
position = "before"
payload = '''if _ch.extra_blinds then
    G.GAME.extra_blinds = {}
    for _, v in ipairs(_ch.extra_blinds) do
        SMODS.create_extra_blind({}, G.P_BLINDS[v], true)
    end
end
if _ch.post_apply and type(_ch.post_apply) == "function" then
    _ch:post_apply()
end'''
match_indent = true
times = 1





#
# Adds variable colors in challenge descriptions
#

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''game_rules[#game_rules+1] = {n=G.UIT.R, config={align = "cl"}, nodes= localize{type = 'text', key = 'ch_c_'..v.id, vars = {v.value}}}'''
position = "at"
payload = '''local vars = {}
if v.value and type(v.value) == 'table' and #v.value > 1 then
    for _, vv in ipairs(v.value) do
        vars[#vars+1] = (vv.type and vv.set and vv.key) and localize(vv) or vv
    end
elseif v.value then
    vars = {(type(v.value) == 'table' and v.value.type and v.value.set and v.value.key) and localize(v.value) or v.value}
end

local colours = nil
if v.colours then
    colours = {}
    for _, colour in ipairs(v.colours) do
        if type(colour) == 'table' and colour.ref_table and colour.ref_key and colour.ref_value then
            colours[#colours+1] = colour.ref_table[colour.ref_key][colour.ref_value]
        else
            colours[#colours+1] = colour
        end
    end
    if #colours > 0 then
        vars.colours = colours
    end
end
game_rules[#game_rules+1] = {n=G.UIT.R, config={align = "cl"}, nodes = localize{type = 'text', key = 'ch_c_'..v.id, vars = vars}}'''
match_indent = true
times = 1